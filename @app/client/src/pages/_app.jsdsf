// import { ApolloClient, ApolloProvider }  from 'react-apollo';
// import { initApolloClient } from '../lib/with-apollo.tsx'
import '../src/styles/tailwind.css'

import withReduxSaga from 'next-redux-saga'
import withRedux from 'next-redux-wrapper'
import App from 'next/app'
// const client = new ApolloClient();
// import routerLogger from '../src/router_logger/routerlogger'
import { Router, withRouter } from 'next/router'
import router from 'next/router'
import React from 'react'
// import React from 'react'
import { Provider } from 'react-redux'

//import { ApolloProvider } from '@apollo/react-hooks';
import Navbar from '../components/navbar'
import withApollo from '../lib/with-apollo'
import { route_history_update } from '../src/redux/actions/actionCreators'
import createStore from '../src/redux/basicStore'

class MyApp extends App {
  static async getInitialProps({ ...props }) {
    // console.log("component", Component)
    ///  console.log("ctx", ctx)
    //  console.log("props getInitialProps()", props)
    const { apolloClient, ctx } = props
    this.apolloClientApp = apolloClient
    this.ctxApp = ctx


  }

  componentDidMount() {
    // console.log('Router', router)
    //  console.log("_app.js: THE STORE! :", this.props.store)
    this.props.store.dispatch(
      route_history_update(
        router && router.Router && router.Router.pathname
      )
    )

    //  console.log("props componentDidMount()", this.props)
    // console.log("_app.js: this.props", this.props)
    //    routerLogger(this.props.router.query)
  }

  render() {
    //   console.log('state _app.tsx', this.state);
    //  console.log('props render() _app.tsx', this.props);

    if (typeof window === 'undefined') {
      console.log('_app: _app.js render on Server')
    } else {
      // console.log('_app:  _app.js render on Client');
    }
    const { Component, pageProps, store } = this.props
    // console.log("PROPS",this.props)

    return (
      <Provider store={store}>
        <Navbar />
        <Component {...pageProps} />
      </Provider>
    )
  }
}

//  export const  apolloClientApp  =  MyApp.getInitialProps.apolloClientApp

//  export const  ctxApp  = MyApp.getInitialProps.ctxApp
const withWrappers = withRedux(createStore)(withReduxSaga(withApollo(MyApp)))


// export default (withRedux(createStore)(withReduxSaga(MyApp)))
export default withRouter(withWrappers)
//export default withRouter(withRedux(createStore)(withReduxSaga(MyApp)))
